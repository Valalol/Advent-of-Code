

0 <= x < height
0 <= y < width
d âˆˆ {0,1,2,3}
directions = [[0,1], [-1,0], [0,-1], [1,0]]
              right    up     left   down

state = (x, y, d)
initial_state : (13, 1, 0)
end_state : x = end.x && y = end.y

Operations:
- rotate counter-clockwise:
    (x, y, d) => (x, y, (d+1)%4)
    cost: 1000

- rotate clockwise:
    (x, y, d) => (x, y, (d-1+4)%4)
    cost: 1000

- step forward:
    let (dx, dy) = directions[d]
    (x, y, d) => (x+dx, y+dy, d)
    cost: 1

Predicate:
Can only step forward if 
    let (dx, dy) = directions[d]
    grid[x+dx][y+dy] == "."


graph = {}

for each cell of the grid
if the cell is walkable
for each direction
add the current state to the graph
graph[`${x}|${y}|${d}`] = {}
add the other rotations as vertices
graph[`${x}|${y}|${d}`][`${x}|${y}|${(d+1)%4}`] = 1000
graph[`${x}|${y}|${d}`][`${x}|${y}|${(d+3)%4}`] = 1000
if the forward direction is walkable, add it as a vertex
graph[`${x}|${y}|${d}`][`${x + directions[d][0]}|${y + directions[d][1]}|${d}`] = 1


